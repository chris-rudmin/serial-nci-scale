{"version":3,"sources":["serial-nci-scale.js","example/App.js","example/reportWebVitals.js","index.js"],"names":["filters","usbVendorId","usbProductId","psUsbConfig","baudRate","dataBits","stopBits","parity","commandChars","CR","parseInt","W","S","Z","LF","ETX","Q","commands","weight","Uint8Array","status","zero","eventDefaults","type","units","SerialNCIScale","isConnected","isDisconnecting","isPolling","lastSettled","Object","assign","decoder","TextDecoder","responseBuffer","this","navigator","serial","requestPort","then","port","open","reader","readable","getReader","writer","writable","getWriter","readLoop","getWeight","releaseLock","close","catch","e","console","error","finally","data","initPort","write","readWriteError","n","Error","toString","substr","split","reverse","firstByte","bitArray","secondByte","stable","atZero","ramError","eepRomError","underCapacity","overCapacity","romError","calibrationError","lfIndex","indexOf","crIndex","etxIndex","slice","flushResponseBuffer","warn","output","parseStatus","subarray","decode","trim","parseFloat","dispatchEvent","CustomEvent","detail","read","value","done","from","poll","setInterval","send","clearInterval","Promise","resolve","reject","onResponse","removeEventListener","addEventListener","sendAndGetResponse","EventTarget","scale","useStyles","makeStyles","theme","button","marginTop","spacing","marginRight","marginBottom","spaceTop","App","classes","useState","scaleData","setScaleData","eventTimeStamp","setEventTimeStamp","eventType","setEventType","setData","timeStamp","Date","useEffect","AppBar","position","Toolbar","Typography","variant","Container","className","maxWidth","display","gutterBottom","Divider","Button","color","onClick","log","getStatus","startPolling","stopPolling","disconnect","Card","CardHeader","title","subheader","CardContent","component","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.3da818c7.chunk.js","sourcesContent":["\nconst filters = [\n  { usbVendorId: 0x1A86, usbProductId: 0x7523 }, // CH340 serial converter\n];\n\n// 7e1 byte format\nconst psUsbConfig = {\n  baudRate: 9600,\n  dataBits: 7, \n  stopBits: 1,\n  parity: 'even',\n};\n\nconst commandChars = {\n  CR:  parseInt('0d', 16), // Carriage Return\n  W:   parseInt('57', 16), // Get Weight\n  S:   parseInt('53', 16), // Get Status\n  Z:   parseInt('5a', 16), // Zero\n  LF:  parseInt('0A', 16), // Line Feed\n  ETX: parseInt('03', 16), // End Of Text\n  Q:   parseInt('3F', 16), // Question Mark\n};\n\n// USB default commands\nconst commands = {\n  weight: new Uint8Array([commandChars.W, commandChars.CR]),\n  status: new Uint8Array([commandChars.S, commandChars.CR]),\n  zero: new Uint8Array([commandChars.Z, commandChars.CR]),\n};\n\nconst eventDefaults = {\n  type: null,\n  weight: null,\n  units: null,\n  status: {}\n};\n\n\n// Implements NCI protocol (Scp-12 or H-100 or 3825/3835). No Handshake.\nexport default class SerialNCIScale extends EventTarget {\n  constructor() {\n    super();\n    this.isConnected = false;\n    this.isDisconnecting = false;\n    this.isPolling = false;\n    this.lastSettled = Object.assign({}, eventDefaults);\n    this.decoder = new TextDecoder('windows-1252');\n    this.responseBuffer = new Uint8Array();\n  }\n\n  async initPort() {\n    if (!this.isConnected) {\n      return navigator.serial.requestPort({ filters }).then(port => {\n        this.port = port;\n        return this.port.open(psUsbConfig);\n       }).then(() => {\n        this.reader = this.port.readable.getReader();\n        this.writer = this.port.writable.getWriter();\n        this.isConnected = true;\n        this.readLoop();\n      });\n    }\n  }\n\n  // Disconnect gracefully\n  async disconnect () {\n    if (this.isConnected) {\n      this.isDisconnecting = true;\n\n      // One last query to unlock the reader before disconnecting\n      return this.getWeight().then(() => {\n        this.reader.releaseLock();\n        this.writer.releaseLock();\n        return this.port.close();\n      }).catch(e => {\n        console.error(e);\n      }).finally(() => {\n        this.isDisconnecting = false;\n        this.isConnected = false;\n      });\n    }\n  }\n\n  // Don't bother to disconnect gracefully\n  readWriteError (e) {\n    console.error(e);\n    this.isConnected = false;\n    this.isDisconnecting = false;\n\n    // Try to close the port, but this will likely throw an error\n    return this.port.close().catch(e => console.error(e));\n  }\n\n  send (data) {\n    return this.initPort().then(() => {\n      return this.writer.write(data).catch(e => {\n        this.readWriteError(e);\n        throw e;\n      });\n    });\n  }\n\n  bitArray(n) {\n    // 6 bits because parity bit has been validated and stripped from 7 bit data\n    if (n < 0 || n > 63 || n % 1 !== 0) {\n        throw new Error(`${n} does not fit into 6 bits`);\n    }\n    return (\"000000\" + n.toString(2)).substr(-6).split('').reverse();\n  }\n\n  // Status is two bytes\n  parseStatus(data) {\n    const firstByte = this.bitArray(data[0]);\n    const secondByte = this.bitArray(data[1]);\n\n    return {\n      stable: firstByte[0] === '0' ? true : false,\n      atZero: firstByte[1] === '1' ? true : false,\n      ramError: firstByte[2] === '1' ? true : false,\n      eepRomError: firstByte[3] === '1' ? true : false,\n      underCapacity: secondByte[0] === '1' ? true : false,\n      overCapacity: secondByte[1] === '1' ? true : false,\n      romError: secondByte[2] === '1' ? true : false,\n      calibrationError: secondByte[3] === '1' ? true : false,\n    };\n  }\n\n  flushResponseBuffer() {\n    const lfIndex = this.responseBuffer.indexOf(commandChars.LF);\n    const crIndex = this.responseBuffer.indexOf(commandChars.CR)\n    const etxIndex = this.responseBuffer.indexOf(commandChars.ETX);\n\n    // discard anything preceeding <LF> and process again\n    if (lfIndex > 0) {\n      this.responseBuffer = this.responseBuffer.slice(lfIndex);\n      return this.flushResponseBuffer();\n    }\n    \n    if (lfIndex === 0 && crIndex > 0) {\n\n      // Unknown Command Response <LF>?<CR>\n      if (crIndex === 2 && this.responseBuffer[1] === commandChars.Q) {\n        console.warn('Unrecognized command received');\n        this.responseBuffer = this.responseBuffer.slice(crIndex + 1);\n        return this.flushResponseBuffer();\n      }\n\n      // Data to publish\n      else if (etxIndex !== -1) {\n        const output = {};\n\n        // Status format <LF>hh<CR><ETX>\n        if (etxIndex === 4) {\n          output.type = 'status';\n          output.status = this.parseStatus(this.responseBuffer.subarray(1, 3));\n        }\n\n        // Weight format <LF>pxxxxxxUU<CR>hh<ETX>\n        else if (etxIndex - crIndex === 3) {\n          output.type = 'weight';\n          output.status = this.parseStatus(this.responseBuffer.subarray(crIndex + 1, etxIndex));\n          output.units = this.decoder.decode(this.responseBuffer.subarray(crIndex - 2, crIndex)).trim();\n          output.weight = parseFloat(this.decoder.decode(this.responseBuffer.subarray(lfIndex + 1, crIndex - 2)).trim(), 10);\n        }\n\n        else {\n          console.warn('Unrecognized format', this.responseBuffer);\n        }\n\n        // Publish any events\n        if (output.type) {\n          this.dispatchEvent(new CustomEvent(output.type, {detail: {...output}}))\n\n          if (output.type === 'weight' && this.lastSettled.weight !== output.weight && output.status.stable) {\n            this.lastSettled = output;\n            this.dispatchEvent(new CustomEvent('settled', {detail: {...output}}));\n          }\n        }\n\n        // Flush the data and run again\n        this.responseBuffer = this.responseBuffer.slice(etxIndex + 1);\n        return this.flushResponseBuffer();\n      }\n    }\n  }\n\n  readLoop() {\n    this.reader.read().then(({ value, done }) => {\n\n      // Keep read loop open while connected\n      if (this.isConnected && !this.isDisconnecting) {\n        this.readLoop();\n      }\n\n      this.responseBuffer = Uint8Array.from([...this.responseBuffer, ...value]);\n      this.flushResponseBuffer();\n    }).catch(e => this.readWriteError(e));\n  }\n\n  startPolling() {\n    if (!this.isPolling) {\n      this.initPort().then(() => {\n        this.isPolling = true;\n        const poll = setInterval(() => {\n          if (this.isConnected && this.isPolling && !this.isDisconnecting) { \n            this.send(commands.weight);\n          }\n          else {\n            clearInterval(poll);\n            this.isPolling = false;\n          }\n        }, 250);\n      });\n    }\n  }\n\n  stopPolling() {\n    this.isPolling = false;\n  }\n\n  sendAndGetResponse(type) {\n    return new Promise((resolve, reject) => {\n      const onResponse = (e) => {\n        this.removeEventListener(type, onResponse);\n        resolve(e.detail);\n      };\n      this.addEventListener(type, onResponse);\n      this.send(commands[type]).catch(e => {\n        this.removeEventListener(type, onResponse);\n        reject(e);\n      });\n    });\n  }\n\n  getWeight() {\n    return this.sendAndGetResponse('weight');\n  }\n\n  getStatus() {\n    return this.sendAndGetResponse('status');\n  }\n\n  zero() {\n    return this.send(commands.zero);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport SerialNCIScale from '../serial-nci-scale';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Divider from '@material-ui/core/Divider';\n\n\nconst scale = new SerialNCIScale();\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginBottom: theme.spacing(4),\n  },\n  spaceTop: {\n    marginTop: theme.spacing(4),\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [scaleData, setScaleData] = useState({});\n  const [eventTimeStamp, setEventTimeStamp] = useState();\n  const [eventType, setEventType] = useState();\n\n  const setData = ({detail, timeStamp, type}) => {\n    setScaleData(detail);\n    setEventTimeStamp(new Date(timeStamp).toString());\n    setEventType(type);\n  };\n\n  useEffect(() => {\n    scale.addEventListener('weight', setData);\n    scale.addEventListener('status', setData);\n    scale.addEventListener('settled', setData);\n\n    return () => {\n      scale.removeEventListener('weight', setData);\n      scale.removeEventListener('status', setData);\n      scale.removeEventListener('settled', setData);\n    };\n  });\n\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" >\n            Serial NCI Scale Demo\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container className={classes.spaceTop} maxWidth=\"md\">\n        <Typography variant=\"h5\">\n          About this demo.\n        </Typography>\n\n        <Typography variant=\"body1\" display=\"block\" gutterBottom>\n          To use the demo, be sure to enable the Web Serial API in chrome flags and plug in your scale.\n          USB scales will need the appropriate VCP driver on Windows to virtualize a serial port.\n        </Typography>\n\n        <Divider />\n\n        <Typography variant=\"h5\" gutterBottom className={classes.spaceTop}>\n          Controls\n        </Typography>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.getWeight().then(weight => console.log(weight))}>\n          Get Weight\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.getStatus().then(status => console.log(status))}>\n          Get Status\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.zero()}>\n          Zero\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.startPolling()}>\n          Start Polling\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.stopPolling()}>\n          Stop Polling\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.disconnect()}>\n          Disconnect\n        </Button>\n\n        <Card className={classes.spaceTop}>\n          <CardHeader\n            title=\"Event Log\"\n            subheader={eventTimeStamp}\n          />\n          <CardContent>\n            <Typography variant=\"body1\" display=\"block\">\n              type: {eventType}\n            </Typography>\n            <Typography variant=\"body1\" display=\"block\" component=\"div\">\n              <div><pre>{JSON.stringify(scaleData, null, 2) }</pre></div>\n            </Typography>\n          </CardContent>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './example/App';\nimport reportWebVitals from './example/reportWebVitals';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline>\n      <App />\n    </CssBaseline>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}