{"version":3,"sources":["serial-nci-scale.js","example/App.js","example/reportWebVitals.js","index.js"],"names":["commandChars","CR","parseInt","W","S","Z","LF","ETX","Q","commands","weight","Uint8Array","status","zero","eventDefaults","type","units","defaultPortConfig","baudRate","dataBits","stopBits","parity","SerialNCIScale","config","filters","portConfig","Object","assign","isConnected","isPolling","lastSettled","responseBuffer","uint8Arr","String","fromCharCode","apply","this","navigator","serial","requestPort","then","port","open","reader","readable","getReader","writer","writable","getWriter","readLoop","cancel","releaseLock","abort","close","console","error","data","initPort","write","catch","e","disconnect","n","Error","toString","substr","split","reverse","firstByte","bitArray","secondByte","stable","atZero","ramError","eepRomError","underCapacity","overCapacity","romError","calibrationError","lfIndex","indexOf","crIndex","etxIndex","slice","flushResponseBuffer","warn","output","parseStatus","subarray","decode","trim","parseFloat","dispatchEvent","CustomEvent","detail","read","value","done","from","poll","setInterval","send","clearInterval","Promise","resolve","reject","onResponse","removeEventListener","addEventListener","sendAndGetResponse","EventTarget","supportedScaleFilters","usbVendorId","usbProductId","scale","isWebSerialSupported","useStyles","makeStyles","theme","button","marginTop","spacing","marginRight","spaceTop","App","classes","useState","scaleData","eventTimeStamp","eventType","eventData","setEventData","setData","timeStamp","useEffect","log","AppBar","position","Toolbar","Typography","variant","Container","className","maxWidth","gutterBottom","display","Divider","Button","color","onClick","getWeight","getStatus","startPolling","stopPolling","Card","CardHeader","title","subheader","CardContent","component","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.ca689a14.chunk.js","sourcesContent":["import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\nconst commandChars = {\n  CR:  parseInt('0d', 16), // Carriage Return\n  W:   parseInt('57', 16), // Get Weight\n  S:   parseInt('53', 16), // Get Status\n  Z:   parseInt('5a', 16), // Zero\n  LF:  parseInt('0A', 16), // Line Feed\n  ETX: parseInt('03', 16), // End Of Text\n  Q:   parseInt('3F', 16), // Question Mark\n};\n\n// USB default commands\nconst commands = {\n  weight: new Uint8Array([commandChars.W, commandChars.CR]),\n  status: new Uint8Array([commandChars.S, commandChars.CR]),\n  zero: new Uint8Array([commandChars.Z, commandChars.CR]),\n};\n\nconst eventDefaults = {\n  type: null,\n  weight: null,\n  units: null,\n  status: {}\n};\n\n// 7e1 byte format\nconst defaultPortConfig = {\n  baudRate: 9600,\n  dataBits: 7, \n  stopBits: 1,\n  parity: 'even',\n};\n\n\n// Implements NCI protocol (Scp-12 or H-100 or 3825/3835). No Handshake.\nexport default class SerialNCIScale extends EventTarget {\n  constructor(config = {}) {\n    super();\n    this.filters = config.filters || [];\n    this.portConfig = Object.assign({}, defaultPortConfig, config.portConfig);\n    this.isConnected = false;\n    this.isPolling = false;\n    this.lastSettled = Object.assign({}, eventDefaults);\n    this.responseBuffer = new Uint8Array();\n  }\n\n  static isWebSerialSupported() {\n    return navigator && navigator.serial ? true : false;\n  }\n\n  decode (uint8Arr) {\n    return String.fromCharCode.apply(null, uint8Arr);\n  }\n\n  async initPort() {\n    if (!this.isConnected) {\n      return navigator.serial.requestPort({ filters: this.filters }).then(port => {\n        this.port = port;\n        return this.port.open(this.portConfig);\n       }).then(() => {\n        this.reader = this.port.readable.getReader();\n        this.writer = this.port.writable.getWriter();\n        this.isConnected = true;\n        this.readLoop();\n      });\n    }\n  }\n\n  async disconnect () {\n    if (this.isConnected) {\n      this.isConnected = false;\n      try {\n        await this.reader.cancel().then(() => this.reader.releaseLock());\n        await this.writer.abort().then(() => this.writer.releaseLock());\n        await this.port.close();\n      }\n      catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  send (data) {\n    return this.initPort().then(() => {\n      return this.writer.write(data).catch(e => {\n        this.disconnect();\n        throw e;\n      });\n    });\n  }\n\n  bitArray(n) {\n    // 6 bits because parity bit has been validated and stripped from 7 bit data\n    if (n < 0 || n > 63 || n % 1 !== 0) {\n        throw new Error(`${n} does not fit into 6 bits`);\n    }\n    return (\"000000\" + n.toString(2)).substr(-6).split('').reverse();\n  }\n\n  // Status is two bytes\n  parseStatus(data) {\n    const firstByte = this.bitArray(data[0]);\n    const secondByte = this.bitArray(data[1]);\n\n    return {\n      stable: firstByte[0] === '0' ? true : false,\n      atZero: firstByte[1] === '1' ? true : false,\n      ramError: firstByte[2] === '1' ? true : false,\n      eepRomError: firstByte[3] === '1' ? true : false,\n      underCapacity: secondByte[0] === '1' ? true : false,\n      overCapacity: secondByte[1] === '1' ? true : false,\n      romError: secondByte[2] === '1' ? true : false,\n      calibrationError: secondByte[3] === '1' ? true : false,\n    };\n  }\n\n  flushResponseBuffer() {\n    const lfIndex = this.responseBuffer.indexOf(commandChars.LF);\n    const crIndex = this.responseBuffer.indexOf(commandChars.CR)\n    const etxIndex = this.responseBuffer.indexOf(commandChars.ETX);\n\n    // discard anything preceeding <LF> and process again\n    if (lfIndex > 0) {\n      this.responseBuffer = this.responseBuffer.slice(lfIndex);\n      return this.flushResponseBuffer();\n    }\n\n    if (lfIndex === 0 && crIndex > 0) {\n\n      // Unknown Command Response <LF>?<CR>\n      if (crIndex === 2 && this.responseBuffer[1] === commandChars.Q) {\n        console.warn('Unrecognized command received');\n        this.responseBuffer = this.responseBuffer.slice(crIndex + 1);\n        return this.flushResponseBuffer();\n      }\n\n      // Data to publish\n      if (etxIndex !== -1) {\n        const output = {};\n\n        // Status format <LF>hh<CR><ETX>\n        if (etxIndex === 4) {\n          output.type = 'status';\n          output.status = this.parseStatus(this.responseBuffer.subarray(1, 3));\n        }\n\n        // Weight format <LF>pxxxxxxUU<CR>hh<ETX>\n        else if (etxIndex - crIndex === 3) {\n          output.type = 'weight';\n          output.status = this.parseStatus(this.responseBuffer.subarray(crIndex + 1, etxIndex));\n          output.units = this.decode(this.responseBuffer.subarray(crIndex - 2, crIndex)).trim();\n          output.weight = parseFloat(this.decode(this.responseBuffer.subarray(lfIndex + 1, crIndex - 2)).trim(), 10);\n        }\n\n        else {\n          console.warn('Unrecognized format', this.responseBuffer);\n        }\n\n        // Publish any events\n        if (output.type) {\n          this.dispatchEvent(new CustomEvent(output.type, {detail: {...output}}))\n\n          if (output.type === 'weight' && this.lastSettled.weight !== output.weight && output.status.stable) {\n            this.lastSettled = output;\n            this.dispatchEvent(new CustomEvent('settled', {detail: {...output}}));\n          }\n        }\n\n        // Flush the data and run again\n        this.responseBuffer = this.responseBuffer.slice(etxIndex + 1);\n        return this.flushResponseBuffer();\n      }\n    }\n  }\n\n  async readLoop() {\n    while (true) {\n      try {\n        const { value, done } = await this.reader.read();\n        if (done) { break; } // this.reader.cancel()\n        this.responseBuffer = Uint8Array.from([...this.responseBuffer, ...value]);\n        this.flushResponseBuffer();\n      }\n      catch (e) {\n        this.disconnect();\n        break;\n      }\n    }\n  }\n\n  startPolling() {\n    if (!this.isPolling) {\n      this.initPort().then(() => {\n        this.isPolling = true;\n        const poll = setInterval(() => {\n          if (this.isConnected && this.isPolling) { \n            this.send(commands.weight);\n          }\n          else {\n            clearInterval(poll);\n            this.isPolling = false;\n          }\n        }, 500);\n      });\n    }\n  }\n\n  stopPolling() {\n    this.isPolling = false;\n  }\n\n  sendAndGetResponse(type) {\n    return new Promise((resolve, reject) => {\n      const onResponse = (e) => {\n        this.removeEventListener(type, onResponse);\n        resolve(e.detail);\n      };\n      this.addEventListener(type, onResponse);\n      this.send(commands[type]).catch(e => {\n        this.removeEventListener(type, onResponse);\n        reject(e);\n      });\n    });\n  }\n\n  getWeight() {\n    return this.sendAndGetResponse('weight');\n  }\n\n  getStatus() {\n    return this.sendAndGetResponse('status');\n  }\n\n  zero() {\n    return this.send(commands.zero);\n  }\n};\n\n\nSerialNCIScale.supportedScaleFilters = [\n  { usbVendorId: 0x1A86, usbProductId: 0x7523 }, // CH340 serial converter\n]\n","import React, { useState, useEffect } from 'react';\nimport SerialNCIScale from '../serial-nci-scale';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport Divider from '@material-ui/core/Divider';\n\n\nconst scale = new SerialNCIScale();\nconst isWebSerialSupported = SerialNCIScale.isWebSerialSupported();\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: theme.spacing(2),\n    marginRight: theme.spacing(2),\n  },\n  spaceTop: {\n    marginTop: theme.spacing(4),\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [eventData, setEventData] = useState({\n    scaleData: {},\n    eventTimeStamp: '',\n    eventType: '',\n  });\n\n  const setData = ({detail, timeStamp, type}) => {\n    setEventData({\n      scaleData: detail,\n      eventTimeStamp: timeStamp,\n      eventType: type,\n    });\n  };\n\n  useEffect(() => {\n    console.log('binding event handlers');\n    scale.addEventListener('weight', setData);\n    scale.addEventListener('status', setData);\n    scale.addEventListener('settled', setData);\n\n    return () => {\n      console.log('Unbinding event handlers');\n      scale.removeEventListener('weight', setData);\n      scale.removeEventListener('status', setData);\n      scale.removeEventListener('settled', setData);\n    };\n  }, []);\n\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" >\n            Serial NCI Scale\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container className={classes.spaceTop} maxWidth=\"md\">\n        <Typography variant=\"h4\" gutterBottom>\n          Connect Your Scale!\n        </Typography>\n\n        <Typography variant=\"body1\" display=\"block\">\n          To test the serial-nci-scale library, be sure to enable the Web Serial API in chrome://flags and connect your scale.\n          USB scales will need the appropriate VCP driver on Windows to virtualize a serial port.\n        </Typography>\n\n        <Typography variant=\"h5\" gutterBottom className={classes.spaceTop}>\n         Known Supported Devices\n        </Typography>\n\n        <Typography variant=\"body1\" display=\"block\" gutterBottom>\n          - Brecknell PS-USB (70lb)\n        </Typography>\n\n        <Divider className={classes.spaceTop}/>\n\n        { isWebSerialSupported ? (\n          <div>\n            <Typography variant=\"h5\" gutterBottom className={classes.spaceTop}>\n              Controls\n            </Typography>\n\n            <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.getWeight().then(weight => console.log(weight))}>\n              Get Weight\n            </Button>\n\n            <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.getStatus().then(status => console.log(status))}>\n              Get Status\n            </Button>\n\n            <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.zero()}>\n              Zero\n            </Button>\n\n            <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.startPolling()}>\n              Start Polling\n            </Button>\n\n            <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.stopPolling()}>\n              Stop Polling\n            </Button>\n\n            <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.disconnect()}>\n              Disconnect\n            </Button>\n\n            <Card className={classes.spaceTop}>\n              <CardHeader\n                title=\"Event Log\"\n                subheader={`Event '${eventData.eventType}' at time ${eventData.eventTimeStamp}`}\n              />\n              <CardContent>\n                <Typography variant=\"body1\" display=\"block\" component=\"div\">\n                  <pre>{JSON.stringify(eventData.scaleData, null, 2) }</pre>\n                </Typography>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          <Card className={classes.spaceTop}>\n            <CardContent>\n              <Typography variant=\"h5\" gutterBottom>\n                Web Serial API is not supported in your browser\n              </Typography>\n\n              <Typography variant=\"body1\">\n                Try using Chrome with the Web Serial API enabled with flag chrome://flags/#enable-experimental-web-platform-features\n              </Typography>\n            </CardContent>\n          </Card>\n        )\n      }\n      </Container>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './example/App';\nimport reportWebVitals from './example/reportWebVitals';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline>\n      <App />\n    </CssBaseline>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}