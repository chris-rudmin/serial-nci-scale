{"version":3,"sources":["serial-nci-scale.js","example/App.js","example/reportWebVitals.js","index.js"],"names":["filters","usbVendorId","usbProductId","psUsbConfig","baudRate","dataBits","stopBits","parity","Scp12Commands","CR","parseInt","W","S","Z","ResponseChars","LF","ETX","Q","eventDefaults","type","weight","units","status","SerialNCIScale","isConnected","isDisconnecting","isPolling","lastSettled","Object","assign","decoder","TextDecoder","responseBuffer","Uint8Array","this","navigator","serial","requestPort","then","port","open","reader","readable","getReader","writer","writable","getWriter","readLoop","catch","e","console","log","disconnect","getWeight","releaseLock","close","data","initPort","write","error","n","Error","toString","substr","split","reverse","firstByte","bitArray","secondByte","stable","atZero","ramError","eepRomError","underCapacity","overCapacity","romError","calibrationError","lfIndex","indexOf","crIndex","etxIndex","slice","flushResponseBuffer","warn","output","parseStatus","subarray","decode","trim","parseFloat","dispatchEvent","CustomEvent","detail","read","value","done","from","poll","setInterval","clearInterval","Promise","resolve","addEventListener","onWeight","removeEventListener","send","onStatus","EventTarget","scale","useStyles","makeStyles","theme","button","marginTop","spacing","marginRight","marginBottom","container","App","classes","useState","scaleData","setScaleData","eventTimeStamp","setEventTimeStamp","eventType","setEventType","setData","timeStamp","Date","useEffect","AppBar","position","Toolbar","Typography","variant","Container","className","gutterBottom","Button","color","onClick","getStatus","zero","startPolling","stopPolling","Card","CardHeader","title","subheader","CardContent","display","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.aa5ed932.chunk.js","sourcesContent":["\nconst filters = [\n  { usbVendorId: 0x1A86, usbProductId: 0x7523 }, // CH340 serial converter\n];\n\n// 7e1 byte format\nconst psUsbConfig = {\n  baudRate: 9600,\n  dataBits: 7, \n  stopBits: 1,\n  parity: 'even',\n};\n\n// USB default commands\nconst Scp12Commands = {\n  CR: parseInt('0d', 16), // Carriage Return\n  W:  parseInt('57', 16), // Get Weight\n  S:  parseInt('53', 16), // Get Status\n  Z:  parseInt('5a', 16), // Zero\n};\n\nconst ResponseChars = {\n  CR:  parseInt('0d', 16), // Carriage Return\n  LF:  parseInt('0A', 16), // Line Feed\n  ETX: parseInt('03', 16), // End Of Text\n  Q:   parseInt('3F', 16), // Question Mark\n};\n\nconst eventDefaults = {\n  type: null,\n  weight: null,\n  units: null,\n  status: {}\n};\n\n\n// Implements NCI (or H-100), (or 3825) protocol\n// No Handshake.\nexport default class SerialNCIScale extends EventTarget {\n  constructor() {\n    super();\n    this.isConnected = false;\n    this.isDisconnecting = false;\n    this.isPolling = false;\n    this.lastSettled = Object.assign({}, eventDefaults);\n    this.decoder = new TextDecoder('windows-1252');\n    this.responseBuffer = new Uint8Array();\n  }\n\n  async initPort() {\n    if (!this.isConnected) {\n      return navigator.serial.requestPort({ filters }).then(port => {\n        this.port = port;\n        return this.port.open(psUsbConfig);\n       }).then(() => {\n        this.reader = this.port.readable.getReader();\n        this.writer = this.port.writable.getWriter();\n        this.isConnected = true;\n        this.readLoop();\n      }).catch(e => {\n        console.log(e);\n        this.disconnect();\n      });\n    }\n  }\n\n  async disconnect () {\n    if (this.isConnected) {\n      this.isDisconnecting = true;\n      await this.getWeight(); // Await one last poll to complete before disconnecting\n      this.reader.releaseLock();\n      this.writer.releaseLock();\n      await this.port.close();\n      this.isDisconnecting = false;\n      this.isConnected = false;\n    }\n  }\n\n  send (data) {\n    return this.initPort().then(() => {\n      return this.writer.write(data).catch((e) => {\n        console.error(e);\n        this.disconnect();\n      });\n    });\n  }\n\n  bitArray(n) {\n    // 6 bits because parity bit has been validated and stripped from 7 bit data\n    if (n < 0 || n > 63 || n % 1 !== 0) {\n        throw new Error(`${n} does not fit into 6 bits`);\n    }\n    return (\"000000\" + n.toString(2)).substr(-6).split('').reverse();\n  }\n\n  // Status is two bytes\n  parseStatus(data) {\n    const firstByte = this.bitArray(data[0]);\n    const secondByte = this.bitArray(data[1]);\n\n    return {\n      stable: firstByte[0] === '0' ? true : false,\n      atZero: firstByte[1] === '1' ? true : false,\n      ramError: firstByte[2] === '1' ? true : false,\n      eepRomError: firstByte[3] === '1' ? true : false,\n      underCapacity: secondByte[0] === '1' ? true : false,\n      overCapacity: secondByte[1] === '1' ? true : false,\n      romError: secondByte[2] === '1' ? true : false,\n      calibrationError: secondByte[3] === '1' ? true : false,\n    }\n  }\n\n  flushResponseBuffer() {\n    const lfIndex = this.responseBuffer.indexOf(ResponseChars.LF);\n    const crIndex = this.responseBuffer.indexOf(ResponseChars.CR)\n    const etxIndex = this.responseBuffer.indexOf(ResponseChars.ETX);\n\n    // discard anything preceeding <LF> and process again\n    if (lfIndex > 0) {\n      this.responseBuffer = this.responseBuffer.slice(lfIndex);\n      return this.flushResponseBuffer();\n    }\n    \n    if (lfIndex === 0 && crIndex > 0) {\n\n      // Unknown Command Response <LF>?<CR>\n      if (crIndex === 2 && this.responseBuffer[1] === ResponseChars.Q) {\n        console.warn('Unrecognized command received');\n        this.responseBuffer = this.responseBuffer.slice(crIndex + 1);\n        return this.flushResponseBuffer();\n      }\n\n      // Data to publish\n      else if (etxIndex !== -1) {\n        const output = {};\n\n        // Status format <LF>hh<CR><ETX>\n        if (etxIndex === 4) {\n          output.type = 'status';\n          output.status = this.parseStatus(this.responseBuffer.subarray(1, 3));\n        }\n\n        // Weight format <LF>pxxxxxxUU<CR>hh<ETX>\n        else if (etxIndex - crIndex === 3) {\n          output.type = 'weight';\n          output.status = this.parseStatus(this.responseBuffer.subarray(crIndex + 1, etxIndex));\n          output.units = this.decoder.decode(this.responseBuffer.subarray(crIndex - 2, crIndex)).trim();\n          output.weight = parseFloat(this.decoder.decode(this.responseBuffer.subarray(lfIndex + 1, crIndex - 2)).trim(), 10);\n        }\n\n        else {\n          console.warn('Unrecognized format', this.responseBuffer);\n        }\n\n        // Publish any events\n        if (output.type) {\n          this.dispatchEvent(new CustomEvent(output.type, {detail: {...output}}))\n\n          if (output.type === 'weight' && this.lastSettled.weight !== output.weight && output.status.stable) {\n            this.lastSettled = output;\n            this.dispatchEvent(new CustomEvent('settled', {detail: {...output}}));\n          }\n        }\n\n        // Flush the data and run again\n        this.responseBuffer = this.responseBuffer.slice(etxIndex + 1);\n        return this.flushResponseBuffer();\n      }\n    }\n  }\n\n  readLoop() {\n    return this.reader.read().then(({ value, done }) => {\n\n      // Keep read loop open while connected\n      if (this.isConnected && !this.isDisconnecting) {\n        this.readLoop();\n      }\n\n      this.responseBuffer = Uint8Array.from([...this.responseBuffer, ...value]);\n      this.flushResponseBuffer();\n    }).catch((e) => {\n      console.error(e);\n      return this.disconnect();\n    });\n  }\n\n  startPolling() {\n    if (!this.isPolling) {\n      this.initPort().then(() => {\n        this.isPolling = true;\n        const poll = setInterval(() => {\n          if (this.isConnected && this.isPolling && !this.isDisconnecting){ \n            this.getWeight();\n          }\n          else {\n            clearInterval(poll);\n            this.isPolling = false;\n          }\n        }, 250);\n      });\n    }\n  }\n\n  stopPolling() {\n    this.isPolling = false;\n  }\n\n  getWeight() {\n    return new Promise(resolve => {\n      const { W, CR } = Scp12Commands;\n      const onWeight = (e) => {\n        this.removeEventListener('weight', onWeight);\n        resolve(e.detail);\n      };\n      this.addEventListener('weight', onWeight);\n      this.send(new Uint8Array([W, CR]));\n    });\n  }\n\n  getStatus() {\n    return new Promise(resolve => {\n      const { S, CR } = Scp12Commands;\n      const onStatus = ({detail}) => {\n        this.removeEventListener('status', onStatus);\n        resolve(detail);\n      };\n      this.addEventListener('status', onStatus);\n      this.send(new Uint8Array([S, CR]));\n    });\n  }\n\n  zero() {\n    const { Z, CR } = Scp12Commands;\n    return this.send(new Uint8Array([Z, CR]));\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport SerialNCIScale from '../serial-nci-scale';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst scale = new SerialNCIScale();\nconst useStyles = makeStyles(theme => ({\n  button: {\n    marginTop: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginBottom: theme.spacing(4),\n  },\n  container: {\n    marginTop: theme.spacing(4),\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n  const [scaleData, setScaleData] = useState({});\n  const [eventTimeStamp, setEventTimeStamp] = useState();\n  const [eventType, setEventType] = useState();\n\n  const setData = ({detail, timeStamp, type}) => {\n    setScaleData(detail);\n    setEventTimeStamp(new Date(timeStamp).toString());\n    setEventType(type);\n  };\n\n  useEffect(() => {\n    scale.addEventListener('weight', setData);\n    scale.addEventListener('status', setData);\n    scale.addEventListener('settled', setData);\n\n    return () => {\n      scale.removeEventListener('weight', setData);\n      scale.removeEventListener('status', setData);\n      scale.removeEventListener('settled', setData);\n    };\n  });\n\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" >\n            Serial NCI Scale Demo\n          </Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Container className={classes.container}>\n        <Typography variant=\"h6\" gutterBottom>\n          Controls\n        </Typography>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.getWeight().then(weight => console.log(weight))}>\n          Get Weight\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.getStatus().then(status => console.log(status))}>\n          Get Status\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.zero()}>\n          Zero\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.startPolling()}>\n          Start Polling\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.stopPolling()}>\n          Stop Polling\n        </Button>\n\n        <Button className={classes.button} variant=\"contained\" color=\"primary\" onClick={() => scale.disconnect()}>\n          Disconnect\n        </Button>\n\n        <Card>\n          <CardHeader\n            title=\"Event Log\"\n            subheader={eventTimeStamp}\n          />\n          <CardContent>\n            <Typography variant=\"subtitle2\" display=\"block\">\n              Event: \"{eventType}\"\n            </Typography>\n            <Typography variant=\"subtitle2\" display=\"block\">\n              <div><pre>{JSON.stringify(scaleData, null, 2) }</pre></div>\n            </Typography>\n          </CardContent>\n        </Card>\n      </Container>\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './example/index.css';\nimport App from './example/App';\nimport reportWebVitals from './example/reportWebVitals';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline>\n      <App />\n    </CssBaseline>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}